// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApi.Helpers;

#nullable disable

namespace WebApi.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220423202746_4")]
    partial class _4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.2");

            modelBuilder.Entity("WebApi.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AcceptTerms")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cpf")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PasswordReset")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone1")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Phone1Verified")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResetToken")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Verified")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Cpf")
                        .IsUnique();

                    b.ToTable("accounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AcceptTerms = true,
                            Created = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8427),
                            Email = "User1@teste.com",
                            Name = "User1",
                            PasswordHash = "$2a$11$jurHlZ3Jf1AOIrkKMLcsBueo0JYM8mWVCi6w4QTE9Rx1yKJC2WV/q",
                            Role = 0,
                            VerificationToken = "583422",
                            Verified = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8412)
                        },
                        new
                        {
                            Id = 2,
                            AcceptTerms = true,
                            Created = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8433),
                            Email = "User2@teste.com",
                            Name = "User2",
                            PasswordHash = "$2a$11$jurHlZ3Jf1AOIrkKMLcsBueo0JYM8mWVCi6w4QTE9Rx1yKJC2WV/q",
                            Role = 0,
                            VerificationToken = "583422",
                            Verified = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8429)
                        },
                        new
                        {
                            Id = 3,
                            AcceptTerms = true,
                            Created = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8438),
                            Email = "User3@teste.com",
                            Name = "User3",
                            PasswordHash = "$2a$11$jurHlZ3Jf1AOIrkKMLcsBueo0JYM8mWVCi6w4QTE9Rx1yKJC2WV/q",
                            Role = 0,
                            VerificationToken = "583422"
                        },
                        new
                        {
                            Id = 4,
                            AcceptTerms = true,
                            Created = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8442),
                            Email = "User4@teste.com",
                            Name = "User4",
                            PasswordHash = "$2a$11$jurHlZ3Jf1AOIrkKMLcsBueo0JYM8mWVCi6w4QTE9Rx1yKJC2WV/q",
                            Role = 0,
                            VerificationToken = "583422"
                        },
                        new
                        {
                            Id = 5,
                            AcceptTerms = true,
                            Created = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8449),
                            Email = "User5@teste.com",
                            Name = "User5",
                            PasswordHash = "$2a$11$jurHlZ3Jf1AOIrkKMLcsBueo0JYM8mWVCi6w4QTE9Rx1yKJC2WV/q",
                            Role = 0,
                            VerificationToken = "583422",
                            Verified = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8444)
                        },
                        new
                        {
                            Id = 6,
                            AcceptTerms = true,
                            Created = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8453),
                            Email = "User6@teste.com",
                            Name = "User6",
                            PasswordHash = "$2a$11$jurHlZ3Jf1AOIrkKMLcsBueo0JYM8mWVCi6w4QTE9Rx1yKJC2WV/q",
                            Role = 0,
                            VerificationToken = "583422",
                            Verified = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8450)
                        },
                        new
                        {
                            Id = 7,
                            AcceptTerms = true,
                            Created = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8458),
                            Email = "User7@teste.com",
                            Name = "User7",
                            PasswordHash = "$2a$11$jurHlZ3Jf1AOIrkKMLcsBueo0JYM8mWVCi6w4QTE9Rx1yKJC2WV/q",
                            Role = 0,
                            VerificationToken = "583422",
                            Verified = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8455)
                        },
                        new
                        {
                            Id = 8,
                            AcceptTerms = true,
                            Created = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8463),
                            Email = "User8@teste.com",
                            Name = "User8",
                            PasswordHash = "$2a$11$jurHlZ3Jf1AOIrkKMLcsBueo0JYM8mWVCi6w4QTE9Rx1yKJC2WV/q",
                            Role = 0,
                            VerificationToken = "583422",
                            Verified = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8460)
                        },
                        new
                        {
                            Id = 9,
                            AcceptTerms = true,
                            Created = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8469),
                            Email = "User9@teste.com",
                            Name = "User9",
                            PasswordHash = "$2a$11$jurHlZ3Jf1AOIrkKMLcsBueo0JYM8mWVCi6w4QTE9Rx1yKJC2WV/q",
                            Role = 0,
                            VerificationToken = "583422",
                            Verified = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8465)
                        });
                });

            modelBuilder.Entity("WebApi.Entities.Core.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.ToTable("areas", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Area 1"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Area 2"
                        });
                });

            modelBuilder.Entity("WebApi.Entities.Core.Base.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Key1")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key2")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventTypeId");

                    b.ToTable("events", (string)null);
                });

            modelBuilder.Entity("WebApi.Entities.Core.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CanceledAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FinishAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastUse")
                        .HasColumnType("TEXT");

                    b.Property<int>("PartnerId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("QuantityMaxUse")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("QuantityMaxUseUser")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuantityUsed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Regulation")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UseLimiteDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.ToTable("coupons", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8657),
                            Description = "Cupom 1 - dewr rewrr rer",
                            FinishAt = new DateTime(2022, 4, 28, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8642),
                            PartnerId = 1,
                            QuantityMaxUse = 50,
                            QuantityMaxUseUser = 1,
                            QuantityUsed = 0,
                            Regulation = "Resulamento xx xx x x",
                            StartAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8640),
                            UseLimiteDate = new DateTime(2022, 5, 8, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8651)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8682),
                            Description = "Cupom 2 - dewr rewrr rer",
                            FinishAt = new DateTime(2022, 4, 28, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8677),
                            PartnerId = 1,
                            QuantityMaxUse = 50,
                            QuantityMaxUseUser = 5,
                            QuantityUsed = 0,
                            Regulation = "Resulamento xx xx x x",
                            StartAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8676),
                            UseLimiteDate = new DateTime(2022, 5, 8, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8679)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8689),
                            Description = "Cupom 3 - dewr rewrr rer",
                            FinishAt = new DateTime(2022, 5, 8, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8685),
                            PartnerId = 1,
                            QuantityUsed = 0,
                            Regulation = "Resulamento xx xx x x",
                            StartAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8684),
                            UseLimiteDate = new DateTime(2022, 5, 8, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8687)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8697),
                            Description = "Cupom 4 - dewr rewrr rer",
                            FinishAt = new DateTime(2022, 5, 8, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8693),
                            PartnerId = 2,
                            QuantityUsed = 0,
                            Regulation = "Resulamento xx xx x x",
                            StartAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8692),
                            UseLimiteDate = new DateTime(2022, 5, 8, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8695)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8707),
                            Description = "Cupom 5 - dewr rewrr rer",
                            FinishAt = new DateTime(2022, 4, 21, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8702),
                            PartnerId = 2,
                            QuantityMaxUseUser = 1,
                            QuantityUsed = 0,
                            Regulation = "Resulamento xx xx x x",
                            StartAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8701),
                            UseLimiteDate = new DateTime(2022, 5, 8, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8704)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8715),
                            Description = "Cupom 6 - dewr rewrr rer",
                            FinishAt = new DateTime(2022, 4, 21, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8711),
                            PartnerId = 2,
                            QuantityMaxUse = 50,
                            QuantityUsed = 0,
                            Regulation = "Resulamento xx xx x x",
                            StartAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8710),
                            UseLimiteDate = new DateTime(2022, 5, 8, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8712)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8724),
                            Description = "Cupom 7 - dewr rewrr rer",
                            FinishAt = new DateTime(2022, 4, 21, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8719),
                            PartnerId = 3,
                            QuantityMaxUse = 50,
                            QuantityMaxUseUser = 1,
                            QuantityUsed = 0,
                            Regulation = "Resulamento xx xx x x",
                            StartAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8717),
                            UseLimiteDate = new DateTime(2022, 5, 8, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8720)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8732),
                            Description = "Cupom 8 - dewr rewrr rer",
                            FinishAt = new DateTime(2022, 4, 28, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8728),
                            PartnerId = 3,
                            QuantityMaxUse = 50,
                            QuantityMaxUseUser = 1,
                            QuantityUsed = 0,
                            Regulation = "Resulamento xx xx x x",
                            StartAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8727),
                            UseLimiteDate = new DateTime(2022, 5, 8, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8730)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8740),
                            Description = "Cupom 9 - dewr rewrr rer",
                            FinishAt = new DateTime(2022, 4, 28, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8737),
                            PartnerId = 3,
                            QuantityMaxUse = 50,
                            QuantityMaxUseUser = 1,
                            QuantityUsed = 0,
                            Regulation = "Resulamento xx xx x x",
                            StartAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8735),
                            UseLimiteDate = new DateTime(2022, 5, 8, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8738)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8747),
                            Description = "Cupom 10 - dewr rewrr rer",
                            FinishAt = new DateTime(2022, 4, 28, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8744),
                            PartnerId = 4,
                            QuantityMaxUse = 50,
                            QuantityMaxUseUser = 1,
                            QuantityUsed = 0,
                            Regulation = "Resulamento xx xx x x",
                            StartAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8742),
                            UseLimiteDate = new DateTime(2022, 5, 8, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8745)
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8755),
                            Description = "Cupom 11 - dewr rewrr rer",
                            FinishAt = new DateTime(2022, 4, 28, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8751),
                            PartnerId = 4,
                            QuantityMaxUse = 50,
                            QuantityMaxUseUser = 1,
                            QuantityUsed = 0,
                            Regulation = "Resulamento xx xx x x",
                            StartAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8750),
                            UseLimiteDate = new DateTime(2022, 5, 8, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8753)
                        });
                });

            modelBuilder.Entity("WebApi.Entities.Core.CouponParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CouponId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("CouponId", "ParticipantId")
                        .IsUnique();

                    b.ToTable("coupons_participants", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CouponId = 1,
                            CreatedAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8818),
                            ParticipantId = 1
                        },
                        new
                        {
                            Id = 2,
                            CouponId = 1,
                            CreatedAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8822),
                            ParticipantId = 2
                        },
                        new
                        {
                            Id = 3,
                            CouponId = 1,
                            CreatedAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8825),
                            ParticipantId = 3
                        },
                        new
                        {
                            Id = 4,
                            CouponId = 2,
                            CreatedAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8828),
                            ParticipantId = 1
                        },
                        new
                        {
                            Id = 5,
                            CouponId = 3,
                            CreatedAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8894),
                            ParticipantId = 1
                        },
                        new
                        {
                            Id = 6,
                            CouponId = 4,
                            CreatedAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8897),
                            ParticipantId = 1
                        },
                        new
                        {
                            Id = 7,
                            CouponId = 5,
                            CreatedAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8899),
                            ParticipantId = 1
                        });
                });

            modelBuilder.Entity("WebApi.Entities.Core.CouponUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ActivatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("CouponId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UseDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CouponId");

                    b.ToTable("coupons_users", (string)null);
                });

            modelBuilder.Entity("WebApi.Entities.Core.EventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.ToTable("event_types", (string)null);
                });

            modelBuilder.Entity("WebApi.Entities.Core.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AreaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Comments")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone1")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone2")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("Cnpj")
                        .IsUnique();

                    b.ToTable("participants", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AreaId = 1,
                            City = "Teresina",
                            Cnpj = "123456",
                            Contact = "Contato",
                            CreatedAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8325),
                            District = "Bairro",
                            Email = "Participant1@teste.com",
                            Name = "Participant1",
                            Phone1 = "Phone1",
                            PostalCode = "64014050",
                            State = "PI",
                            Street = "Rua X"
                        },
                        new
                        {
                            Id = 2,
                            AreaId = 1,
                            City = "Teresina",
                            Cnpj = "1234567",
                            Contact = "Contato",
                            CreatedAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8334),
                            District = "Bairro",
                            Email = "Participant2@teste.com",
                            Name = "Participant2",
                            Phone1 = "Phone1",
                            PostalCode = "64014050",
                            State = "PI",
                            Street = "Rua X"
                        },
                        new
                        {
                            Id = 3,
                            AreaId = 1,
                            City = "Teresina",
                            Cnpj = "1234568",
                            Contact = "Contato",
                            CreatedAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8341),
                            District = "Bairro",
                            Email = "Participant3@teste.com",
                            Name = "Participant3",
                            Phone1 = "Phone1",
                            PostalCode = "64014050",
                            State = "PI",
                            Street = "Rua X"
                        },
                        new
                        {
                            Id = 4,
                            AreaId = 1,
                            City = "Teresina",
                            Cnpj = "12345699",
                            Contact = "Contato",
                            CreatedAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8346),
                            District = "Bairro",
                            Email = "Participant4@teste.com",
                            Name = "Participant4",
                            Phone1 = "Phone1",
                            PostalCode = "64014050",
                            State = "PI",
                            Street = "Rua X"
                        });
                });

            modelBuilder.Entity("WebApi.Entities.Core.ParticipantUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("AccountId", "ParticipantId")
                        .IsUnique();

                    b.ToTable("participants_users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 1,
                            CreatedAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8544),
                            ParticipantId = 1
                        },
                        new
                        {
                            Id = 2,
                            AccountId = 2,
                            CreatedAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8549),
                            ParticipantId = 1
                        },
                        new
                        {
                            Id = 3,
                            AccountId = 3,
                            CreatedAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8552),
                            ParticipantId = 1
                        },
                        new
                        {
                            Id = 4,
                            AccountId = 4,
                            CreatedAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8555),
                            ParticipantId = 2
                        },
                        new
                        {
                            Id = 5,
                            AccountId = 5,
                            CreatedAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8558),
                            ParticipantId = 2
                        },
                        new
                        {
                            Id = 6,
                            AccountId = 6,
                            CreatedAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8560),
                            ParticipantId = 2
                        },
                        new
                        {
                            Id = 7,
                            AccountId = 7,
                            CreatedAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8563),
                            ParticipantId = 3
                        },
                        new
                        {
                            Id = 8,
                            AccountId = 8,
                            CreatedAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8565),
                            ParticipantId = 3
                        },
                        new
                        {
                            Id = 9,
                            AccountId = 9,
                            CreatedAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8567),
                            ParticipantId = 3
                        });
                });

            modelBuilder.Entity("WebApi.Entities.Core.Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Comments")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone1")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone2")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Regulation")
                        .HasColumnType("TEXT");

                    b.Property<int>("SegmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Cnpj")
                        .IsUnique();

                    b.HasIndex("SegmentId");

                    b.ToTable("partners", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Teresina",
                            Cnpj = "123456",
                            Contact = "Contato",
                            CreatedAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8070),
                            District = "Bairro",
                            Email = "Empresa1@teste.com",
                            Name = "Empresa1",
                            Phone1 = "Phone1",
                            PostalCode = "64014050",
                            SegmentId = 1,
                            State = "PI",
                            Street = "Rua X"
                        },
                        new
                        {
                            Id = 2,
                            City = "Teresina",
                            Cnpj = "1234567",
                            Contact = "Contato",
                            CreatedAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8110),
                            District = "Bairro",
                            Email = "Empresa2@teste.com",
                            Name = "Empresa2",
                            Phone1 = "Phone1",
                            PostalCode = "64014050",
                            SegmentId = 1,
                            State = "PI",
                            Street = "Rua X"
                        },
                        new
                        {
                            Id = 3,
                            City = "Teresina",
                            Cnpj = "1234568",
                            Contact = "Contato",
                            CreatedAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8241),
                            District = "Bairro",
                            Email = "Empresa3@teste.com",
                            Name = "Empresa3",
                            Phone1 = "Phone1",
                            PostalCode = "64014050",
                            SegmentId = 1,
                            State = "PI",
                            Street = "Rua X"
                        },
                        new
                        {
                            Id = 4,
                            City = "Teresina",
                            Cnpj = "12345699",
                            Contact = "Contato",
                            CreatedAt = new DateTime(2022, 4, 23, 17, 27, 20, 472, DateTimeKind.Local).AddTicks(8249),
                            District = "Bairro",
                            Email = "Empresa4@teste.com",
                            Name = "Empresa4",
                            Phone1 = "Phone1",
                            PostalCode = "64014050",
                            SegmentId = 1,
                            State = "PI",
                            Street = "Rua X"
                        });
                });

            modelBuilder.Entity("WebApi.Entities.Core.Segment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.ToTable("segments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Segmento 1"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Segmento 2"
                        });
                });

            modelBuilder.Entity("WebApi.Entities.Account", b =>
                {
                    b.OwnsMany("WebApi.Entities.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INTEGER");

                            b1.Property<int>("AccountId")
                                .HasColumnType("INTEGER");

                            b1.Property<DateTime>("Created")
                                .HasColumnType("TEXT");

                            b1.Property<string>("CreatedByIp")
                                .HasColumnType("TEXT");

                            b1.Property<DateTime>("Expires")
                                .HasColumnType("TEXT");

                            b1.Property<string>("ReasonRevoked")
                                .HasColumnType("TEXT");

                            b1.Property<string>("ReplacedByToken")
                                .HasColumnType("TEXT");

                            b1.Property<DateTime?>("Revoked")
                                .HasColumnType("TEXT");

                            b1.Property<string>("RevokedByIp")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Token")
                                .HasColumnType("TEXT");

                            b1.HasKey("Id");

                            b1.HasIndex("AccountId");

                            b1.ToTable("RefreshToken");

                            b1.WithOwner("Account")
                                .HasForeignKey("AccountId");

                            b1.Navigation("Account");
                        });

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("WebApi.Entities.Core.Base.Event", b =>
                {
                    b.HasOne("WebApi.Entities.Core.EventType", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("WebApi.Entities.Core.Coupon", b =>
                {
                    b.HasOne("WebApi.Entities.Core.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("WebApi.Entities.Core.CouponParticipant", b =>
                {
                    b.HasOne("WebApi.Entities.Core.Coupon", "Coupon")
                        .WithMany()
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Core.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("WebApi.Entities.Core.CouponUser", b =>
                {
                    b.HasOne("WebApi.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Core.Coupon", "Coupon")
                        .WithMany()
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("WebApi.Entities.Core.Participant", b =>
                {
                    b.HasOne("WebApi.Entities.Core.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("WebApi.Entities.Core.ParticipantUser", b =>
                {
                    b.HasOne("WebApi.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Core.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("WebApi.Entities.Core.Partner", b =>
                {
                    b.HasOne("WebApi.Entities.Core.Segment", "Segment")
                        .WithMany()
                        .HasForeignKey("SegmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Segment");
                });
#pragma warning restore 612, 618
        }
    }
}
